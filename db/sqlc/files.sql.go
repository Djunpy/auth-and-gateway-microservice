// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: files.sql

package db

import (
	"context"
)

const addFileToMessage = `-- name: AddFileToMessage :one
INSERT INTO message_files(
    message_id,
    file_id
)VALUES ($1, $2)
RETURNING id, message_id, file_id
`

type AddFileToMessageParams struct {
	MessageID int32 `json:"message_id"`
	FileID    int32 `json:"file_id"`
}

func (q *Queries) AddFileToMessage(ctx context.Context, arg AddFileToMessageParams) (MessageFile, error) {
	row := q.queryRow(ctx, q.addFileToMessageStmt, addFileToMessage, arg.MessageID, arg.FileID)
	var i MessageFile
	err := row.Scan(&i.ID, &i.MessageID, &i.FileID)
	return i, err
}

const createFile = `-- name: CreateFile :one
INSERT INTO files(
    user_id,
    filepath
)VALUES ($1, $2)
RETURNING id, user_id, filename, filepath
`

type CreateFileParams struct {
	UserID   int32  `json:"user_id"`
	Filepath string `json:"filepath"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.queryRow(ctx, q.createFileStmt, createFile, arg.UserID, arg.Filepath)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Filepath,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :one
DELETE FROM files
WHERE user_id = $1 OR id = $2
RETURNING id, user_id, filename, filepath
`

type DeleteFileParams struct {
	UserID int32 `json:"user_id"`
	ID     int32 `json:"id"`
}

func (q *Queries) DeleteFile(ctx context.Context, arg DeleteFileParams) (File, error) {
	row := q.queryRow(ctx, q.deleteFileStmt, deleteFile, arg.UserID, arg.ID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Filepath,
	)
	return i, err
}
