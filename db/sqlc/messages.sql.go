// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: messages.sql

package db

import (
	"context"
	"database/sql"
)

const addUserToChat = `-- name: AddUserToChat :one
INSERT INTO chat_participants (
    user_id,
    chat_id
)VALUES ($1, $2) RETURNING id, user_id, chat_id, is_deleted
`

type AddUserToChatParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	ChatID int32         `json:"chat_id"`
}

func (q *Queries) AddUserToChat(ctx context.Context, arg AddUserToChatParams) (ChatParticipant, error) {
	row := q.queryRow(ctx, q.addUserToChatStmt, addUserToChat, arg.UserID, arg.ChatID)
	var i ChatParticipant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatID,
		&i.IsDeleted,
	)
	return i, err
}

const createChat = `-- name: CreateChat :one
INSERT INTO chats (is_deleted) VALUES (false)
RETURNING id, is_deleted, create_at
`

func (q *Queries) CreateChat(ctx context.Context) (Chat, error) {
	row := q.queryRow(ctx, q.createChatStmt, createChat)
	var i Chat
	err := row.Scan(&i.ID, &i.IsDeleted, &i.CreateAt)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    chat_id,
    sender_id,
    text_message
) VALUES ($1, $2, $3)
RETURNING id, chat_id, sender_id, text_message, is_deleted, sent_at
`

type CreateMessageParams struct {
	ChatID      int32         `json:"chat_id"`
	SenderID    sql.NullInt32 `json:"sender_id"`
	TextMessage string        `json:"text_message"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage, arg.ChatID, arg.SenderID, arg.TextMessage)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.SenderID,
		&i.TextMessage,
		&i.IsDeleted,
		&i.SentAt,
	)
	return i, err
}

const createMessageStatus = `-- name: CreateMessageStatus :one
INSERT INTO message_status(
    message_id,
    is_read,
    is_delivered
)VALUES($1, $2, $3)
RETURNING id, message_id, is_read, is_delivered
`

type CreateMessageStatusParams struct {
	MessageID   int32        `json:"message_id"`
	IsRead      sql.NullBool `json:"is_read"`
	IsDelivered sql.NullBool `json:"is_delivered"`
}

func (q *Queries) CreateMessageStatus(ctx context.Context, arg CreateMessageStatusParams) (MessageStatus, error) {
	row := q.queryRow(ctx, q.createMessageStatusStmt, createMessageStatus, arg.MessageID, arg.IsRead, arg.IsDelivered)
	var i MessageStatus
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.IsRead,
		&i.IsDelivered,
	)
	return i, err
}

const deleteChatFromUser = `-- name: DeleteChatFromUser :one
UPDATE chat_participants
    SET
        is_deleted = true
WHERE user_id = $1 OR chat_id = $2
RETURNING id, user_id, chat_id, is_deleted
`

type DeleteChatFromUserParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	ChatID int32         `json:"chat_id"`
}

func (q *Queries) DeleteChatFromUser(ctx context.Context, arg DeleteChatFromUserParams) (ChatParticipant, error) {
	row := q.queryRow(ctx, q.deleteChatFromUserStmt, deleteChatFromUser, arg.UserID, arg.ChatID)
	var i ChatParticipant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatID,
		&i.IsDeleted,
	)
	return i, err
}

const getChatByUsers = `-- name: GetChatByUsers :one
SELECT c.id, c.is_deleted, c.create_at
FROM chats c
         JOIN chat_participants p ON c.id = p.chat_id
WHERE p.user_id IN ($1, $2)
  AND c.is_deleted = false
`

type GetChatByUsersParams struct {
	UserID   sql.NullInt32 `json:"user_id"`
	UserID_2 sql.NullInt32 `json:"user_id_2"`
}

func (q *Queries) GetChatByUsers(ctx context.Context, arg GetChatByUsersParams) (Chat, error) {
	row := q.queryRow(ctx, q.getChatByUsersStmt, getChatByUsers, arg.UserID, arg.UserID_2)
	var i Chat
	err := row.Scan(&i.ID, &i.IsDeleted, &i.CreateAt)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET
    text_message = COALESCE($1, text_message),
    is_deleted = COALESCE($2, is_deleted)
WHERE sender_id = $3 OR chat_id = $4
RETURNING id, chat_id, sender_id, text_message, is_deleted, sent_at
`

type UpdateMessageParams struct {
	TextMessage sql.NullString `json:"text_message"`
	IsDeleted   sql.NullBool   `json:"is_deleted"`
	SenderID    sql.NullInt32  `json:"sender_id"`
	ChatID      int32          `json:"chat_id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.updateMessageStmt, updateMessage,
		arg.TextMessage,
		arg.IsDeleted,
		arg.SenderID,
		arg.ChatID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.SenderID,
		&i.TextMessage,
		&i.IsDeleted,
		&i.SentAt,
	)
	return i, err
}
